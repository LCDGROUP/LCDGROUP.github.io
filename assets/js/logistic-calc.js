let productDatabase = [];

function loadProductDatabase() {
    return fetch('tws.json')
        .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json(); // –ü–∞—Ä—Å–∏–º JSON –Ω–∞–ø—Ä—è–º—É—é
        })
        .then(data => {
            if (!Array.isArray(data)) throw new Error('Expected array');
            
            productDatabase = data.map(item => ({
                name: item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || '',
                code: item['–ö–æ–¥'] || '',
                duty: parseDuty(item['–¢–∞—Ä–∏—Ñ']),
                details: item['–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏'] || ''
            }));
            
            console.log('Loaded', productDatabase.length, 'products');
            return productDatabase;
        })
        .catch(error => {
            console.error('Error loading product database:', error);
            productDatabase = [];
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö.');
            return [];
        });
}

function parseDuty(tariff) {
    if (!tariff) return 0.10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    if (typeof tariff === 'number') return tariff / 100;
    
    const str = String(tariff).trim();
    if (str === '0%' || str === '0') return 0;
    
    const percent = parseFloat(str.replace('%', '').replace(',', '.'));
    return !isNaN(percent) ? percent / 100 : 0.10;
}

document.addEventListener('DOMContentLoaded', function() {
    loadProductDatabase().then(() => {
        // –¢–∞–±–ª–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        const densityRates = [
            { minDensity: 1000, rate: 0.625 },
            { minDensity: 800, rate: 0.675 },
            { minDensity: 600, rate: 0.725 },
            { minDensity: 500, rate: 0.775 },
            { minDensity: 400, rate: 0.800 },
            { minDensity: 350, rate: 0.850 },
            { minDensity: 300, rate: 0.875 },
            { minDensity: 250, rate: 0.900 },
            { minDensity: 200, rate: 0.925 },
            { minDensity: 190, rate: 0.950 },
            { minDensity: 180, rate: 0.975 },
            { minDensity: 170, rate: 1.000 },
            { minDensity: 160, rate: 1.025 },
            { minDensity: 150, rate: 1.050 },
            { minDensity: 140, rate: 1.100 },
            { minDensity: 130, rate: 1.150 },
            { minDensity: 120, rate: 1.200 },
            { minDensity: 110, rate: 1.250 },
            { minDensity: 100, rate: 1.300 }
        ];

        // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
        const tnvedInput = document.getElementById('tnved-code');
        const suggestionsBox = document.getElementById('tnved-suggestions');

        if (tnvedInput && suggestionsBox) {
            const tnvedClear = document.createElement('button');
            tnvedClear.innerHTML = 'üóëÔ∏è';
            tnvedClear.className = 'clear-input-btn';
            tnvedClear.title = '–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ';
            tnvedClear.addEventListener('click', () => {
                tnvedInput.value = '';
                tnvedInput.focus();
            });
            tnvedInput.parentNode.insertBefore(tnvedClear, tnvedInput.nextSibling);

            tnvedInput.addEventListener('input', function() {
                const query = this.value.toLowerCase().trim();

                if (query.length < 2) {
                    suggestionsBox.style.display = 'none';
                    return;
                }

                // –ò—â–µ–º –ø–æ –∫–æ–¥—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                const suggestions = productDatabase.filter(item =>
                    item.code.toLowerCase().includes(query) || 
                    item.name.toLowerCase().includes(query)
                ).slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

                suggestionsBox.innerHTML = '';

                if (suggestions.length > 0) {
                    suggestions.forEach(item => {
                        const div = document.createElement('div');
                        div.className = 'suggestion-item';
                        
                        // –í—ã–¥–µ–ª—è–µ–º –∫–æ–¥
                        const codeSpan = document.createElement('span');
                        codeSpan.className = 'suggestion-code';
                        codeSpan.textContent = item.code;
                        
                        // –í—ã–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                        const nameSpan = document.createElement('span');
                        nameSpan.className = 'suggestion-name';
                        nameSpan.textContent = item.name;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—à–ª–∏–Ω—É
                        const dutySpan = document.createElement('span');
                        dutySpan.className = 'suggestion-duty';
                        dutySpan.textContent = ` (${(item.duty * 100).toFixed(0)}%)`;
                        
                        div.appendChild(codeSpan);
                        div.appendChild(document.createTextNode(' - '));
                        div.appendChild(nameSpan);
                        div.appendChild(dutySpan);
                        
                        div.addEventListener('click', () => {
                            tnvedInput.value = item.code;
                            suggestionsBox.style.display = 'none';
                        });
                        suggestionsBox.appendChild(div);
                    });
                    suggestionsBox.style.display = 'block';
                } else {
                    suggestionsBox.style.display = 'none';
                }
            });
        }

        // –§–æ—Ä–º–∞ —Ä–∞—Å—á–µ—Ç–∞
        const calculatorForm = document.getElementById('delivery-calculator');
        
        if (calculatorForm) {
            calculatorForm.addEventListener('submit', function(e) {
                e.preventDefault();

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
                const fromCity = document.getElementById('route-from')?.value || '';
                const toCity = document.getElementById('route-to')?.value || '';
                const tnvedCode = document.getElementById('tnved-code')?.value || '';
                const transportType = document.querySelector('input[name="transport-type"]:checked')?.value || 'ltl';
                const weight = parseFloat(document.getElementById('product-weight')?.value) || 0;
                const volume = parseFloat(document.getElementById('product-volume')?.value) || 0;
                const quantity = parseInt(document.getElementById('product-quantity')?.value) || 1;
                const cost = parseFloat(document.getElementById('product-cost')?.value) || 0;
                const currency = document.getElementById('product-currency')?.value || 'usd';

                // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—à–ª–∏–Ω—ã
                const product = productDatabase.find(item => 
                    item.code === tnvedCode || item.name.toLowerCase() === tnvedCode.toLowerCase()
                ) || { duty: 0.10, name: tnvedCode, code: '' };

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ FTL —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤
                if (transportType === 'ftl' && (weight > 26000 || volume > 70)) {
                    showResult(`
                        <div class="result-title">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞</div>
                        <div class="result-grid">
                            <div class="result-item">
                                <span class="result-label">–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏:</span>
                                <span class="result-value">FTL (–ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã)</span>
                            </div>
                            <div class="result-item">
                                <span class="result-label">–í–µ—Å:</span>
                                <span class="result-value">${weight} –∫–≥</span>
                            </div>
                            <div class="result-item">
                                <span class="result-label">–û–±—ä–µ–º:</span>
                                <span class="result-value">${volume} –º¬≥</span>
                            </div>
                            <div class="result-item total">
                                <span class="result-label">–î–ª—è –≥—Ä—É–∑–æ–≤ —Å–≤—ã—à–µ 26000 –∫–≥ –∏–ª–∏ 70 –º¬≥</span>
                                <span class="result-value">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü—Ü–µ–Ω—ã</span>
                            </div>
                        </div>
                        <button id="contact-manager-btn" class="request-btn">–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</button>
                    `, true);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ LTL —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤
                if (transportType === 'ltl' && (weight > 26000 || volume > 70)) {
                    showResult(`
                        <div class="result-title">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞</div>
                        <div class="result-grid">
                            <div class="result-item">
                                <span class="result-label">–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏:</span>
                                <span class="result-value">LTL (–ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã)</span>
                            </div>
                            <div class="result-item">
                                <span class="result-label">–í–µ—Å:</span>
                                <span class="result-value">${weight} –∫–≥</span>
                            </div>
                            <div class="result-item">
                                <span class="result-label">–û–±—ä–µ–º:</span>
                                <span class="result-value">${volume} –º¬≥</span>
                            </div>
                            <div class="result-item total">
                                <span class="result-label">–î–ª—è –≥—Ä—É–∑–æ–≤ —Å–≤—ã—à–µ 26000 –∫–≥ –∏–ª–∏ 70 –º¬≥</span>
                                <span class="result-value">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü—Ü–µ–Ω—ã</span>
                            </div>
                        </div>
                        <button id="contact-manager-btn" class="request-btn">–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</button>
                    `, true);
                    return;
                }

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD
                let costUSD = convertToUSD(cost, currency);

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
                const density = volume ? weight / volume : 0;

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—à–ª–∏–Ω—É –∏ –ù–î–°
                const duty = costUSD * product.duty;
                const vat = (costUSD + duty) * 0.2;

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
                const { deliveryCost, deliveryRate } = calculateDeliveryCost(transportType, weight, volume, density);

                // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                const totalCost = costUSD + duty + vat + deliveryCost;
                const unitCost = totalCost / (quantity || 1);

                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                showResult(`
                    <div class="result-title">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞</div>
                    <div class="result-grid">
                        <div class="result-item">
                            <span class="result-label">–ú–∞—Ä—à—Ä—É—Ç:</span>
                            <span class="result-value">${getCityName('route-from')} ‚Üí ${getCityName('route-to')}</span>
                        </div>
                        <div class="result-item">
                            <span class="result-label">–¢–æ–≤–∞—Ä:</span>
                            <span class="result-value">${product.name} (${product.code || '–∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'})</span>
                        </div>
                        <div class="result-item">
                            <span class="result-label">–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏:</span>
                            <span class="result-value">${transportType === 'ftl' ? 'FTL (–ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)' : 'LTL (—Å–±–æ—Ä–Ω—ã–π –≥—Ä—É–∑)'}</span>
                        </div>
                        <div class="result-item">
                            <span class="result-label">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–∑–∞ (–∫–≥/–º¬≥):</span>
                            <span class="result-value">${density ? density.toFixed(2) : '‚Äî'}</span>
                        </div>
                        <div class="result-item">
                            <span class="result-label">–°—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ ($/–∫–≥):</span>
                            <span class="result-value">${deliveryRate.toFixed(4)}</span>
                        </div>
                        <div class="result-item">
                            <span class="result-label">–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</span>
                            <span class="result-value">${costUSD.toFixed(2)} $</span>
                        </div>
                        <div class="result-item">
                            <span class="result-label">–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (${(product.duty * 100).toFixed(1)}%):</span>
                            <span class="result-value">${duty.toFixed(2)} $</span>
                        </div>
                        <div class="result-item">
                            <span class="result-label">–ù–î–° (20%):</span>
                            <span class="result-value">${vat.toFixed(2)} $</span>
                        </div>
                        <div class="result-item">
                            <span class="result-label">–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</span>
                            <span class="result-value">${deliveryCost.toFixed(2)} $</span>
                        </div>
                        <div class="result-item total">
                            <span class="result-label">–ò–¢–û–ì–û:</span>
                            <span class="result-value">${totalCost.toFixed(2)} $</span>
                        </div>
                        <div class="result-item total">
                            <span class="result-label">–°—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞:</span>
                            <span class="result-value">${unitCost.toFixed(2)} $</span>
                        </div>
                    </div>
                    <button id="send-request-btn" class="request-btn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
                `, false);
            });
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function convertToUSD(amount, currency) {
            const rates = { usd: 1, cny: 0.14, byn: 0.4, rub: 0.01 };
            return amount * (rates[currency] || 1);
        }

        function calculateDeliveryCost(transportType, weight, volume, density) {
            if (transportType === 'ftl') {
                return {
                    deliveryCost: 7000,
                    deliveryRate: weight ? 7000 / weight : 0
                };
            }

            // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–≤–∫—É –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è LTL
            let deliveryRate = 0.35; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            for (const { minDensity, rate } of densityRates) {
                if (density >= minDensity) {
                    deliveryRate = rate;
                    break;
                }
            }

            return {
                deliveryCost: deliveryRate * weight,
                deliveryRate
            };
        }

        function getCityName(selectId) {
            const select = document.getElementById(selectId);
            return select?.options[select.selectedIndex]?.text || '';
        }

        function showResult(html, isContactManager) {
            const resultSection = document.getElementById('calculation-result');
            if (!resultSection) return;

            resultSection.innerHTML = html;
            resultSection.style.display = 'block';

            if (isContactManager) {
                const contactBtn = document.getElementById('contact-manager-btn');
                if (contactBtn) {
                    contactBtn.addEventListener('click', contactManager);
                }
            } else {
                const sendBtn = document.getElementById('send-request-btn');
                if (sendBtn) {
                    sendBtn.addEventListener('click', sendRequest);
                }
            }

            resultSection.scrollIntoView({ behavior: 'smooth' });
        }

        function contactManager() {
            const name = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
            const email = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:');
            const phone = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');

            if (name && email && phone) {
                alert('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
            }
        }

        function sendRequest() {
            const modalHTML = `
                <div class="modal-overlay" id="request-modal">
                    <div class="modal-content">
                        <h3>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</h3>
                        <div class="form-group-modal">
                            <label for="client-name">–í–∞—à–µ –∏–º—è:</label>
                            <input type="text" id="client-name" required>
                        </div>
                        <div class="form-group-modal">
                            <label for="client-email">Email:</label>
                            <input type="email" id="client-email" required>
                        </div>
                        <div class="form-group-modal">
                            <label for="client-phone">–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                            <input type="tel" id="client-phone" required>
                        </div>
                        <div class="form-group-modal">
                            <label for="client-comments">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                            <input type="text" id="client-comments">
                        </div>
                        <div class="modal-buttons">
                            <button class="cancel-btn" id="cancel-request">–û—Ç–º–µ–Ω–∞</button>
                            <button class="submit-btn" id="submit-request">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                        </div>
                    </div>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', modalHTML);
            const modal = document.getElementById('request-modal');
            modal.style.display = 'flex';

            document.getElementById('cancel-request').addEventListener('click', () => {
                modal.remove();
            });

            document.getElementById('submit-request').addEventListener('click', () => {
                const name = document.getElementById('client-name').value;
                const email = document.getElementById('client-email').value;
                const phone = document.getElementById('client-phone').value;
                const comments = document.getElementById('client-comments').value;

                if (!name || !email || !phone) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
                    return;
                }

                const formData = {
                    name,
                    email,
                    phone,
                    comments,
                    calculationData: getCalculationData()
                };

                sendEmail(formData);
                modal.remove();
                alert('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
            });
        }

        function getCalculationData() {
            const resultItems = document.querySelectorAll('.result-item');
            let results = '';

            resultItems.forEach(item => {
                const label = item.querySelector('.result-label').textContent;
                const value = item.querySelector('.result-value').textContent;
                results += `${label} ${value}\n`;
            });

            return results;
        }

        function sendEmail(data) {
            const botToken = '7655942797:AAE99nRRdxePbzfuUNzlO92P3mclpfOnLbM';
            const chatIds = ['511108569', '465139726']; // –í–∞—à–∏ chat_id

            const text = encodeURIComponent(`
        <b>üöö –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</b>

        <b>üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
        <i>–ò–º—è:</i> <b>${data.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>
        <i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> <code>${data.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>
        <i>Email:</i> <code>${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>
        <i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</i> ${data.comments || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}

        <b>üìä –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞:</b>
        ${formatCalculationData(data.calculationData)}

        <i>üìÖ ${new Date().toLocaleString()}</i>
            `);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É chat_id
            chatIds.forEach(chatId => {
                fetch(`https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${chatId}&text=${text}&parse_mode=HTML`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
                    });
            });
        }

        function formatCalculationData(rawData) {
            if (!rawData) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–∞';
            return rawData.split('\n')
                .filter(line => line.trim())
                .map(line => `<i>${line.replace(':', ':</i> <b>')}</b>`)
                .join('\n');
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        const consultForm = document.getElementById('consult-form');
        
        if (consultForm) {
            consultForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const submitBtn = document.getElementById('consult-submit');
                const originalBtnText = submitBtn.textContent;
                submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
                submitBtn.disabled = true;
                
                const name = document.getElementById('consult-name').value.trim();
                let telegram = document.getElementById('consult-telegram').value.trim();
                const phone = document.getElementById('consult-phone').value.trim();
                const message = document.getElementById('consult-message').value.trim();
                
                if (!telegram.startsWith('@') && telegram !== '') {
                    telegram = '@' + telegram;
                }
                
                try {
                    await sendConsultationRequest(name, telegram, phone, message);
                    showConsultResult('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', true);
                    consultForm.reset();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
                    showConsultResult('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', false);
                } finally {
                    submitBtn.textContent = originalBtnText;
                    submitBtn.disabled = false;
                }
            });
        }
    });
});